`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////

    module top_tb ();
    
    logic clk;
    logic reset;
    logic [31:0] writedata, dataadr;            
    logic memwrite;  
    
    
    // Instantiate the unit under test
    top DUT (
        clk,
        reset,
        writedata,
        dataadr,
        memwrite
    );
    
    /* Add stimulus here */
    initial begin
       
       reset = 1;
       #5
       reset = 0;
    end
    
    always begin
        clk = 0;
        #5
        clk = 1;
        #5
        clk = 0;
        #5
        clk = 1;

    end
    
 endmodule       












`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Course: CS 224, Digital Design and Computer Architecture 
// Student: Okan Sen 
// 
// Create Date: 12/05/2019 02:00:44 PM
// Design Name: complete mips model
// Module Name: top
// Project Name: Lab05
// Target Devices: computer
// Tool Versions: none
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////



//top module, use it to call other modules and to test.
module top (input logic clk, reset, output logic MemWriteD, RegWriteD, output logic [31:0] WriteDataE, PCF, instr, ResultW);
    imem imem([7:2] addr, instr);
    mips mips (clk, reset, pc, instr, memwrite, dataadr, writedata, readdata);  
    dmem dmem(clk, MemWriteM, ALUOutM, WriteDataM, RDM);

endmodule
module PipeFtoD(input logic[31:0] instr, PcPlus4F,
                input logic EN, clk, reset, StallD,		// StallD will be connected as this EN
                output logic[31:0] instrD, PcPlus4D);

                always_ff @(posedge clk)
		    if(reset)
                        begin
                        instrD<=0;
                        PcPlus4D<=0;
                        end
                    else if(EN)
                        begin
                        instrD<=instr;
                        PcPlus4D<=PcPlus4F;
                        end
                
endmodule

// Similarly, the pipe between Writeback (W) and Fetch (F) is given as follows.

module PipeWtoF(input logic[31:0] PC,
                input logic EN, clk, reset, StallF,		// StallF will be connected as this EN
                output logic[31:0] PCF);

                always_ff @(posedge clk)
		if(reset)
		begin
			PCF <=0;
		end  
		else if(EN)
		begin
			PCF<=PC;
		end
                
endmodule

// *******************************************************************************
// Below, write the modules for the pipes PipeDtoE, PipeEtoM, PipeMtoW yourselves.
// Don't forget to connect Control signals in these pipes as well.
// *******************************************************************************


module PipeDtoE(input logic RegWriteD, MemtoRegD, MemWriteD, 
                input logic [2:0] ALUControlD,
                input logic ALUSrcD, RegDstD, 
                input logic [31:0] RD1, RD2,
                input logic [4:0] RsD, RtD, RdD,
                input logic [31:0] SignImmD,
                input logic clk, reset,
                output logic RegWriteE, MemtoRegE, MemWriteE, 
                output logic [2:0] ALUControlE,
                output logic ALUSrcE, RegDstE,
                output logic [31:0] RE1, RE2,
                output logic [4:0] RsE, RtE, RdE, FlushE,   // FlushE will be connected
                output logic [31:0] SignImmE);
                
                
               always_ff @(posedge clk)
                     if (reset)
                       begin
                         RegWriteE <= 0;
                         MemtoRegE <= 0;
                         MemWriteE <= 0; 
                         
                         ALUControlE <= 0;
                         ALUSrcE <= 0;
                         RegDstE <= 0;
                          
                         RE1 <= 0;
                         RE2 <= 0; 
                          
                         RsE <= 0;
                         RtE <= 0;
                         RdE <= 0;
                         SignImmE <= 0;
                       end     
                    else if (FlushE)
                      begin
                        RegWriteE <= 0;
                        MemtoRegE <= 0;
                        MemWriteE <= 0; 
                        
                        ALUControlE <= 0;
                        ALUSrcE <= 0;
                        RegDstE <= 0;
                         
                        RE1 <= 0;
                        RE2 <= 0; 
                         
                        RsE <= 0;
                        RtE <= 0;
                        RdE <= 0;
                        SignImmE <= 0;
                      end     
                    else if (~reset)
                      begin
                         RegWriteE <= RegWriteD;
                         MemtoRegE <= MemtoRegD;
                         MemWriteE <= MemWriteD; 
                         
                         ALUControlE <= ALUControlD;
                         ALUSrcE <= ALUSrcD;
                         RegDstE <= RegDstD;
                         
                         RE1 <= RD1;
                         RE2 <= RD2; 
                         
                         RsE <= RsD;
                         RtE <= RtD;
                         RdE <= RdD;
                         SignImmE <= SignImmD;
                       end
                  
                  

endmodule

module PipeEtoM(input logic RegWriteE, MemtoRegE, MemWriteE,
                input logic [31:0] ALUOutE, WriteDataE,
                input logic [4:0] WriteRegE,
                input logic clk,reset,
                output logic RegWriteM, MemtoRegM, MemWriteM, 
                output logic [31:0] ALUOutM, WriteDataM,
                output logic [4:0] WriteRegM);
        
              always_ff @(posedge clk)
                      if (reset)
                        begin
                          RegWriteM <= 0;
                          MemtoRegM <= 0;
                          MemWriteM <= 0;
                          
                          ALUOutM <= 0;
                          WriteDataM <= 0;
                          
                          WriteRegM <= 0;
                        end
                      
                      else if (~reset)
                        begin
                          RegWriteM <= RegWriteE;
                          MemtoRegM <= MemtoRegE;
                          MemWriteM <= MemWriteE;
                        
                          ALUOutM <= ALUOutE;
                          WriteDataM <= WriteDataE;
                        
                          WriteRegM <= WriteRegE;
                        end
                      
                              
endmodule

module PipeMtoW(input logic RegWriteM, MemtoRegM, 
                input logic [31:0] ReadDataM, ALUOutM,
                input logic [4:0] WriteRegM,
                input logic clk,reset,
                output logic RegWriteW, MemtoRegW,  
                output logic [31:0] ReadDataW, ALUOutW,
                output logic [4:0] WriteRegW);
		
		      always_ff @(posedge clk)
                    if (reset)
                      begin
                        RegWriteW <= 0;
                        MemtoRegW <= 0;
                        
                        ReadDataW <= 0;
                        ALUOutW <= 0;
                        
                        WriteRegW <= 0;
                      end
                    
                    else if (~reset)
                      begin
                        RegWriteW <= RegWriteM;
                        MemtoRegW <= MemtoRegM;
                        
                        ReadDataW <= ReadDataM;
                        ALUOutW <= ALUOutM;
                        
                        WriteRegW <= WriteRegM;
                      end
endmodule



// *******************************************************************************
// End of the individual pipe definitions.
// ******************************************************************************

// *******************************************************************************
// Below is the definition of the datapath.
// The signature of the module is given. The datapath will include (not limited to) the following items:
//  (1) Adder that adds 4 to PC
//  (2) Shifter that shifts SignImmE to left by 2
//  (3) Sign extender and Register file
//  (4) PipeFtoD
//  (5) PipeDtoE and ALU
//  (5) Adder for PCBranchM
//  (6) PipeEtoM and Data Memory
//  (7) PipeMtoW
//  (8) Many muxes
//  (9) Hazard unit
//  ...?
// Once again, you don't have to stick to the design below
// *******************************************************************************
//You can skip the usage of datapath and mips modules and combine them directly in the top module itself.
module datapath (input  logic clk, reset, RegWriteW,
                 input logic RegWriteD, MemWriteD, MemtoRegD, RegDstD,
		         input  logic[2:0]  ALUControlD,
		         input logic BranchD,
		         input logic [31:0] pcPlus4D, instr,
		         input logic [31:0] ResultW,
		         input logic [4:0] rsD,rtD,rdD,	
		         input logic [15:0] immD,		         // Add or remove input-outputs if necessary
		         input logic [4:0] WriteRegW,			
		         
		         output logic RegWriteE,MemToRegE,MemWriteE,                 
                 output logic[31:0] ALUOutE, WriteDataE,
                 output logic [4:0] WriteRegE,
                 output logic [31:0] PCBranchE,
                 output logic pcSrcD); 

	// ********************************************************************
	// Here, define the wires that are needed inside this pipelined datapath module
	// ********************************************************************
    logic [4:0] ALURD1Out, ALURD2Out;
    logic EqualD;
    logic PCF;
    logic PCNextbr;
    logic PCPlus4F;
	
	// ********************************************************************
	// Instantiate the required modules below in the order of the datapath flow.
	// ********************************************************************
	// next PC logic
      flopr #(32) pcreg(clk, reset, PCNextbr, stallf, PCF);
      adder       pcadd1(PCF, 32'b100, pcPlus4F);
      mux2 #(32)  pcbrmux(pcPlus4F, PCBranchD, PCSrcD, PCNextbr); 
      sl2         immsh(signimmD, signimmsh);
      adder       pcadd2(pcPlus4D, signimmsh, PCBranchD);
	
	// register file and Pipe D logic
    regfile     rf (clk, we3, ra1, ra2, wa3,wd3, RD1, RD2);
	
	mux25 #(5) ALURD1mux(RD1, ALUOutM, ForwardAD, ALURD1Out);
	mux25 #(5) ALURD2mux(RD2, ALUOutM, ForwardBD, ALURD2Out);
	equal #(5) ALURDsEq(ALURD1Out, ALURD2Out, EqualD);
	
	assign PCSrcD = branchD & EqualD;
	
	signext se(instr[15:0], signimmd);
	
	
	// Pipe F to D Logic
	PipeFtoD pipefd(instr, pcPlus4F, EN, clk, reset, StallD, instrD, pcPlus4D);
	
	// Pipe W to F Logic
	PipeWtoF pipewf(PC, EN, clk, reset, StallF, PCF);
	
	// Pipe D to E Logic
	PipeDtoE pipede(RegWriteD, MemtoRegD, MemWriteD, ALUControlD, ALUSrcD, ALUSrcD, RegDstD, RD1, RD2, RsD, RtD, RdD, SignImmD, clk, reset, RegWriteE, MemtoRegE, MemWriteE, ALUControlE, ALUSrcE, RegDstE, RE1, RE2, RsE, RtE, RdE, FlushE,SignImmE);
	
	// Pipe E to M Logic
	PipeEtoM pipeem(RegWriteE, MemtoRegE, MemWriteE, ALUOutE, WriteDataE, WriteRegE, clk,reset, RegWriteM, MemtoRegM, MemWriteM, ALUOutM, WriteDataM, WriteRegM);
	
	// Pipe M to W Logic
	PipeMtoW(RegWriteM, MemtoRegM, ReadDataM, ALUOutM, WriteRegM, clk,reset, RegWriteW, MemtoRegW, ReadDataW, ALUOutW, WriteRegW);
	
	// Pipe E logic
	mux25 #(5) rtrdmuxe(rtE, rdE, RegDstE, WriteRegE);
	mux35 #(5) rd1resalumuxe(RD1, ResultW, ALUOutM, ForwardAE, SrcAE);
	mux35 #(5) rd2resalumuxe(RD2, ResultW, ALUOutM, ForwardAE, WriteDataE);
	mux25 #(5) wrtdtsignimmmuxe(WriteDataE, SignImmE, ALUSrcE, SrcBE);
	
	// ALU Logic 
	alu alu(SrcAE, SrcBE, ALUControlE, ALUOutE);
	
	// Pipe M Logic or we can DMEM since only module there is this
	
	
	// Pipe W Logic
	mux25 #(5) resalumuxw(ReadDataW, ALUOutW, MemtoRegW, ResultW);
	
endmodule



// Hazard Unit with inputs and outputs named
// according to the convention that is followed on the book.

module HazardUnit(  input logic RegWriteW,
                input logic [4:0] WriteRegW,
                input logic RegWriteM, MemToRegM,
                input logic [4:0] WriteRegM,
                input logic RegWriteE, MemToRegE,
                input logic [4:0] rsE,rtE,
                input logic [4:0] rsD,rtD,
                output logic [1:0] ForwardAE,ForwardBE,
                output logic FlushE,StallD,StallF,
                input logic BranchD,				// Add or remove input-outputs if necessary
                input logic [4:0] WriteRegE,
                output logic  ForwardAD, ForwardBD
    );

    logic lwstall, bstall;

    always_comb begin
    
	// ********************************************************************
	// Here, write equations for the Hazard Logic.
	// If you have troubles, please study pages ~420-430 in your book.
	// ********************************************************************
    ForwardAD = (rsD != 0) & (rsD == WriteRegM) & RegWriteM;
    FowardBD = (rtD != 0) & (rtD == WriteRegM) & RegWriteM;
    
    branchstall = (BranchD & RegWriteE & (WriteRegE == rsD | WriteRegE == rtD)) | (BranchD & MemToRegM & (WriteRegM == rsD | WriteRegM == rtD));
        
        StallF = StallD = FlushE = lwstall | bstall;
        
    end
endmodule


module mips (input  logic        clk, reset,
             output logic[31:0]  pc,
             input  logic[31:0]  instr,				// Add or remove input-outputs if necessary
             output logic        memwrite,
             output logic[31:0]  aluout, resultW,
             output logic[31:0]  instrOut,
             input  logic[31:0]  readdata);

  logic        memtoreg, pcsrc, zero, alusrc, regdst, regwrite, jump;
  logic [2:0]  alucontrol;
  assign instrOut = instr;

	// ********************************************************************
	// Below, instantiate a controller and a datapath with their new (if modified) signatures
	// and corresponding connections.
	// ********************************************************************


endmodule


// External instruction memory used by MIPS single-cycle
// processor. It models instruction memory as a stored-program 
// ROM, with address as input, and instruction as output
// Modify it to test your own programs.

module imem ( input logic [5:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
	always_comb
	   case ({addr,2'b00})		   	// word-aligned fetch
//
// 	***************************************************************************
//	Here, you can paste your own test cases that you prepared for the part 1-g.
//	Below is a program from the single-cycle lab.
//	***************************************************************************
//
//		address		instruction
//		-------		-----------
		8'h00: instr = 32'h20020005;  	// disassemble, by hand 
		8'h04: instr = 32'h2003000c;  	// or with a program,
		8'h08: instr = 32'h2067fff7;  	// to find out what
		8'h0c: instr = 32'h00e22025;  	// this program does!
		8'h10: instr = 32'h00642824;
		8'h14: instr = 32'h00a42820;
		8'h18: instr = 32'h10a7000a;
		8'h1c: instr = 32'h0064202a;
		8'h20: instr = 32'h10800001;
		8'h24: instr = 32'h20050000;
		8'h28: instr = 32'h00e2202a;
		8'h2c: instr = 32'h00853820;
		8'h30: instr = 32'h00e23822;
		8'h34: instr = 32'hac670044;
		8'h38: instr = 32'h8c020050;
		8'h3c: instr = 32'h20020001;
		8'h40: instr = 32'h1000FFFF; //will loop between here and
		8'h44: instr = 32'hac020054; //here
	     default:  instr = {32{1'bx}};	// unknown address
	   endcase
endmodule



// 	***************************************************************************
//	Below are the modules that you shouldn't need to modify at all.. You can ignore jump case
//	***************************************************************************

module controller(input  logic[5:0] op, funct,
                  output logic     memtoreg, memwrite,
                  output logic     alusrc,
                  output logic     regdst, regwrite,
                  output logic[2:0] alucontrol,
                  output logic branch);

   logic [1:0] aluop;

   maindec md (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite, aluop);

   aludec  ad (funct, aluop, alucontrol);

endmodule

// External data memory used by MIPS single-cycle processor

module dmem (input  logic        clk, we,
             input  logic[31:0]  a, wd,
             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];
  
   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)

endmodule

module maindec (input logic[5:0] op, 
	              output logic memtoreg, memwrite, branch,
	              output logic alusrc, regdst, regwrite,
	              output logic[1:0] aluop );
   logic [8:0] controls;

   assign {regwrite, regdst, alusrc, branch, memwrite,
                memtoreg,  aluop} = controls;

  always_comb
    case(op)
      6'b000000: controls <= 9'b11000010; // R-type
      6'b100011: controls <= 9'b10100100; // LW
      6'b101011: controls <= 9'b00101000; // SW
      6'b000100: controls <= 9'b00010001; // BEQ
      6'b001000: controls <= 9'b10100000; // ADDI
      default:   controls <= 9'bxxxxxxxx; // illegal op
    endcase
endmodule

module aludec (input    logic[5:0] funct,
               input    logic[1:0] aluop,
               output   logic[2:0] alucontrol);
  always_comb
    case(aluop)
      2'b00: alucontrol  = 3'b010;  // add  (for lw/sw/addi)
      2'b01: alucontrol  = 3'b110;  // sub   (for beq)
      default: case(funct)          // R-TYPE instructions
          6'b100000: alucontrol  = 3'b010; // ADD
          6'b100010: alucontrol  = 3'b110; // SUB
          6'b100100: alucontrol  = 3'b000; // AND
          6'b100101: alucontrol  = 3'b001; // OR
          6'b101010: alucontrol  = 3'b111; // SLT
          default:   alucontrol  = 3'bxxx; // ???
        endcase
    endcase
endmodule

module regfile (input    logic clk, we3, 
                input    logic[4:0]  ra1, ra2, wa3, 
                input    logic[31:0] wd3, 
                output   logic[31:0] rd1, rd2
                );

  logic [31:0] rf [31:0];

  // three ported register file: read two ports combinationally
  // write third port on rising edge of clock. Register0 hardwired to 0.

  always_ff @(negedge clk)
     if (we3) 
         rf [wa3] <= wd3;	

  assign rd1 = (ra1 != 0) ? rf [ra1] : 0;
  assign rd2 = (ra2 != 0) ? rf[ ra2] : 0;

endmodule

module alu(input  logic [31:0] a, b, 
           input  logic [2:0]  alucont, 
           output logic [31:0] result);
    
    always_comb
        case(alucont)
            3'b010: result = a + b;
            3'b110: result = a - b;
            3'b000: result = a & b;
            3'b001: result = a | b;
            3'b111: result = (a < b) ? 1 : 0;
            default: result = {32{1'bx}};
        endcase
    
    
endmodule

module adder (input  logic[31:0] a, b,
              output logic[31:0] y);
     
     assign y = a + b;
endmodule

module sl2 (input  logic[31:0] a,
            output logic[31:0] y);
     
     assign y = {a[29:0], 2'b00}; // shifts left by 2
endmodule

module signext (input  logic[15:0] a,
                output logic[31:0] y);
              
  assign y = {{16{a[15]}}, a};    // sign-extends 16-bit a
endmodule



// paramaterized 2-to-1 MUX
module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule

//In case if you need this
module mux25 #(parameter WIDTH = 5)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule

//In case if you need this
module equal #(parameter WIDTH = 32)
             (input  logic[WIDTH-1:0] d0, d1,
              output logic y);
          
    always_comb
        assign y = (d0 == d1) ? 1'b1 : 1'b0;
   
endmodule

// parameterized register
module flopr #(parameter WIDTH = 8)
              (input logic clk, reset, 
	       input logic[WIDTH-1:0] d, 
               output logic[WIDTH-1:0] q);

  always_ff@(posedge clk, posedge reset)
    if (reset) q <= 0; 
    else       q <= d;
endmodule

// parameterized 3-to-1 MUX
module mux35 #(parameter WIDTH = 5)
		(input logic d0, d1, d2,
		input logic[WIDTH-2:0] s,
		output logic y);
	always_comb
		case(s)

		2'b00: y = d0;
		2'b01: y = d1;
		2'b10: y = d2;

	endcase	 
endmodule
